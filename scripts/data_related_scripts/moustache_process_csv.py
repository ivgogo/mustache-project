#!/usr/bin/env python3

import pandas as pd
import numpy
import time
import sys
import os

def main(data_dir, out_dir):

    start_time = time.time()

    # ========================== LOAD CSV ==========================

    print('Reading file...')
    os.makedirs(out_dir, exist_ok=True)
    df = pd.read_csv(os.path.join(data_dir, 'data.csv')) # data.csv generated by one_csv.py

    print('Preprocessing data...')

    # We count how many frequencies we have for each label and print 
    # Which label has the most/less freqs
    class_fr = df[df.columns[-1]].value_counts()
    class_fr = dict(class_fr)
    print('\nClass Frequencies:', sorted(class_fr.items()))
    print('Lowest:', min(class_fr, key=class_fr.get))
    print('Highest:', max(class_fr, key=class_fr.get))

    # We normalize freqs from 0 to 1
    total = sum(class_fr.values())
    print('Total:', total)
    for k in class_fr.keys():
        class_fr[k] /= total
    print('\nFrequencies Normed:', sorted(class_fr.items()))

    # We analize the weights each label has and we reverse it in order to balance 
    for k in class_fr.keys():
        class_fr[k] **= -1
    total = sum(class_fr.values())
    for k in class_fr.keys():
        class_fr[k] /= total
    print('\nClass Weights:', sorted(class_fr.items()))

    # ========================== GROUPING LABELS ==========================

    # Keep in mind this might change depending on the data we have
    df[df.columns[-1]] = df[df.columns[-1]].mask(df[df.columns[-1]]==10,2)

    print('\nLabels modified:')
    print(sorted(dict(df[df.columns[-1]].value_counts()).items()))

    # another way of applying the changes to labels
    # changes = {3: 1, 4: 1, 6: 2, 9: 3, 10: 3}
    # combined_labels1 = combined_labels.copy().replace(changes)

    # ========================== RESAMPLING ==========================

    print('\nResampling classes...')

    # count how many freq bands we have for each value
    class_fr = df[df.columns[-1]].value_counts()
    class_fr = dict(class_fr)

    # sort by labels (0, 1, 2...)
    fracs = numpy.asarray(sorted(class_fr.items()))[:, 1]

    # we determine how many freq bands we want for each label in order to have a "balanced" dataset in some way
    fr = fracs.copy()
    fr[[9]] = 110000
    fr[[0, 3]] = 30000
    fr[[1, 4]] = 9000

    fracs = fr / fracs
    fracs = fracs.tolist()

    sampled_data_array = []

    # making resampled data 
    for i in range(len(fracs)):
        sampled_data = df[df[df.columns[-1]] == i].sample(frac=fracs[i], random_state=21)
        sampled_data_array.append(sampled_data) 
    
    os.makedirs(os.path.join(out_dir, 'sampled'), exist_ok=True)
    sampled_data_combined = pd.concat(sampled_data_array)
    sampled_data_combined.to_csv(os.path.join(out_dir, 'sampled', 'sampled_data.csv'), index=False)

    print('\nResampled data file generated...')
    
    del class_fr, fr, fracs

    # ========================== TRAIN/TEST/VAL SPLIT ==========================

    df = pd.read_csv(os.path.join(out_dir, 'sampled', 'sampled_data.csv'))
    class_id = df[df.columns[-1]].unique()
    
    print('\nAfter resampling:')
    print(sorted(dict(df[df.columns[-1]].value_counts()).items()))
    print('\nStratified split:')
    df_ = df[df[df.columns[-1]]==class_id[0]]
    a = df_.sample(frac=0.8, random_state=42)
    b = df_.drop(a.index)
    for id in class_id[1:]:
        print(id-1, end=' ')
        df_ = df[df[df.columns[-1]]==id]
        a_ = df_.sample(frac=0.8, random_state=42)
        b_ = df_.drop(a_.index)
        a = pd.concat([a, a_])
        b = pd.concat([b, b_])
    
    print(id)

    del df, df_, a_, b_

    # ========================== MERGING CLASSES AND SAVING ==========================

    '''
    Color labels:
    0.0:  (53, 136, 119),      # dirty CB                                   ||  0, 1, 2 --> 0 (all cb)
    1.0:  (153,136,119),       # Shadow CB                                  ||  3, 4, 5 --> 1 (all meat)
    2.0:  (164,56,255),        # Missclassified CB                          ||  6, 7, 8 --> 2 (all fat)
    3.0:  (223,116,255),       # Meat                                       ||  9 and 10 --> 3 (all plastic)
    4.0:  (200,116,255),       # Meat Shadow                                ||
    5.0:  (0,116,255),         # Missclassified meat                        ||
    6.0:  (255,255,0),         # Fat                                        ||
    7.0:  (200,255,0),         # Fat Shadow                                 ||
    8.0:  (200,200,0),         # Missclassified fat                         ||
    9.0:  (76,76,76),          # PEHD Red plastic                           ||
    10.0: (100,76,76),         # PEHD small pieces Red plastic on PORK      ||          
    '''

    # FOLDER STRUCTURE:
    # Process_csv creates 'ready' folder on data_dir (where data.csv should be)
    # Process_csv creates 'sampled', 'train' and 'val' inside of 'ready' folder
    # Inside of 'sampled' --> sampled data, inside of 'train' and 'val' --> d2x, dx, x, y subfolders with data

    os.makedirs(os.path.join(out_dir, 'train'), exist_ok=True)
    os.makedirs(os.path.join(out_dir, 'val'), exist_ok=True)
    directories = ['x', 'dx', 'd2x', 'y']
    for i in range(4):
        os.makedirs(os.path.join(out_dir, 'train', directories[i]), exist_ok=True)
        os.makedirs(os.path.join(out_dir, 'val', directories[i]), exist_ok=True)

    print('\nMerging classes...')
    for df, sub_dir in zip((a,b),('train', 'val')):
        df[df.columns[-1]] = df[df.columns[-1]].mask(df[df.columns[-1]].isin((0,1,3,4,5,6,7,8)), 0)
        df[df.columns[-1]] = df[df.columns[-1]].mask(df[df.columns[-1]].isin((2,9)), 1)

        print('\nAfter merging',sub_dir,':')
        print(sorted(dict(df[df.columns[-1]].value_counts()).items()))
        print('\nWriting to disk...')

        # Interval of points where moustache is located - gabi --> mail
        start_point = 141
        end_point = 165

        x = df[df.columns[start_point:end_point]]; dx = df[df.columns[184+start_point:184+end_point]]; d2x = df[df.columns[368+start_point:368+end_point]]
        y = df[df.columns[-1]]

        x.to_csv(os.path.join(out_dir, sub_dir, 'x', 'x.csv'), index=False)
        dx.to_csv(os.path.join(out_dir, sub_dir, 'dx', 'dx.csv'), index=False)
        d2x.to_csv(os.path.join(out_dir, sub_dir, 'd2x', 'd2x.csv'), index=False)
        y.to_csv(os.path.join(out_dir, sub_dir, 'y', 'y.csv'), index=False)

    del df, x, dx, d2x, y, a, b
  
    end_time = time.time()
    print(f"Fin. Script ran in {end_time-start_time} seconds")


if __name__ == '__main__':
    try:
        data_dir = sys.argv[1]
        out_dir = os.path.join(data_dir, 'ready')
    except:
        print('Usage: python3 process_csv.py <dataset_dir>')
    else:
        if os.path.exists(data_dir):
            main(data_dir, out_dir)
        else:
            sys.exit('Invalid Path!')